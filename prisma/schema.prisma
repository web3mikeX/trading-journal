generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum AccountType {
  EVALUATION_50K
  EVALUATION_100K
  EVALUATION_150K
  EVALUATION
  CUSTOM
  LIVE_FUNDED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  isEmailVerified   Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  baseCurrency      String             @default("USD")
  initialBalance    Float              @default(10000)
  riskPercentage    Float              @default(2)
  timezone          String             @default("UTC")
  tradingStyle      String?
  experience        String?
  // Account management fields
  accountBalance    Float?
  dailyLossLimit    Float?
  maxLossLimit      Float?
  profitTarget      Float?
  accountStartDate  DateTime?
  brokerSyncEnabled Boolean            @default(false)
  autoSyncEnabled   Boolean            @default(false)
  // Trailing drawdown fields
  accountType       AccountType        @default(CUSTOM)
  startingBalance   Float?
  currentAccountHigh Float?
  trailingDrawdownAmount Float?
  isLiveFunded      Boolean            @default(false)
  firstPayoutReceived Boolean          @default(false)
  lastEodCalculation DateTime?
  accounts          Account[]
  brokerConnections BrokerConnection[]
  calendarEntries   CalendarEntry[]
  dailySnapshots    DailyAccountSnapshot[]
  importJobs        ImportJob[]
  journalEntries    JournalEntry[]
  sessions          Session[]
  syncLogs          SyncLog[]
  tags              Tag[]
  trades            Trade[]
  tradingGoals      TradingGoal[]

  @@map("users")
}

model Trade {
  id                 String         @id @default(cuid())
  userId             String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  symbol             String
  side               String
  strategy           String?
  setup              String?
  market             String         @default("STOCK")
  contractType       String         @default("STANDARD")
  contractMultiplier Float          @default(1.0)
  entryDate          DateTime
  entryPrice         Float
  quantity           Float
  entryFees          Float          @default(0)
  exitDate           DateTime?
  exitPrice          Float?
  exitFees           Float          @default(0)
  stopLoss           Float?
  takeProfit         Float?
  riskAmount         Float?
  grossPnL           Float?
  netPnL             Float?
  commission         Float          @default(0)
  swap               Float          @default(0)
  returnPercent      Float?
  status             String         @default("OPEN")
  notes              String?
  screenshots        String?
  dataSource         String         @default("manual")
  tradeHash          String?
  isDuplicate        Boolean        @default(false)
  aiSummary          String?
  journalEntries     JournalEntry[]
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags               TradeTag[]

  @@index([userId, entryDate])
  @@index([userId, symbol])
  @@index([userId, status])
}

model JournalEntry {
  id         String   @id @default(cuid())
  userId     String
  tradeId    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String
  content    String
  entryType  String   @default("GENERAL")
  mood       Int?
  confidence Int?
  excitement Int?
  fear       Int?
  trade      Trade?   @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, entryType])
}

model Tag {
  id          String     @id @default(cuid())
  userId      String
  createdAt   DateTime   @default(now())
  name        String
  color       String     @default("#3B82F6")
  description String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades      TradeTag[]

  @@unique([userId, name])
}

model TradeTag {
  tradeId String
  tagId   String
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  trade   Trade  @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@id([tradeId, tagId])
}

model TradingGoal {
  id           String    @id @default(cuid())
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String
  description  String?
  targetValue  Float?
  currentValue Float     @default(0)
  targetDate   DateTime?
  goalType     String
  status       String    @default("ACTIVE")
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}

model ImportJob {
  id            String    @id @default(cuid())
  userId        String
  filename      String
  status        String    @default("PENDING")
  totalRows     Int       @default(0)
  processedRows Int       @default(0)
  errors        String?
  createdAt     DateTime  @default(now())
  completedAt   DateTime?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model BrokerConnection {
  id            String    @id @default(cuid())
  userId        String
  brokerName    String
  apiKey        String
  accountType   String?
  isActive      Boolean   @default(true)
  lastSync      DateTime?
  syncFrequency String    @default("manual")
  settings      String?
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncLogs      SyncLog[]

  @@index([userId, brokerName])
}

model SyncLog {
  id                 String           @id @default(cuid())
  userId             String
  brokerConnectionId String
  status             String           @default("SUCCESS")
  tradesImported     Int              @default(0)
  errors             String?
  syncedAt           DateTime         @default(now())
  brokerConnection   BrokerConnection @relation(fields: [brokerConnectionId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, syncedAt])
}

model CalendarEntry {
  id            String   @id @default(cuid())
  userId        String
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  notes         String?
  mood          Int?
  images        String?
  dailyPnL      Float?
  tradesCount   Int      @default(0)
  winningTrades Int      @default(0)
  losingTrades  Int      @default(0)
  winRate       Float?
  aiSummary     String?  // AI-generated daily trading summary
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@index([date])
}

model DailyAccountSnapshot {
  id                String   @id @default(cuid())
  userId            String
  date              DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  endOfDayBalance   Float
  accountHigh       Float    // Running high water mark
  calculatedMLL     Float    // Maximum Loss Limit as of this date
  netPnLToDate      Float    // Cumulative P&L since account start
  dailyPnL          Float    // P&L for this specific day
  tradesCount       Int      @default(0)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@index([date])
}
